name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write

jobs:
  publish-crate:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    - name: Cache Cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-index-

    - name: Check formatting
      run: cargo fmt --all --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run tests
      run: cargo test --all-features

    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

  build-binaries:
    name: Build Release Binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: fisheye-tools-linux-x86_64
            binary_extension: ""
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: fisheye-tools-macos-x86_64
            binary_extension: ""
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: fisheye-tools-macos-aarch64
            binary_extension: ""
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: fisheye-tools-windows-x86_64.exe
            binary_extension: ".exe"

    steps:
    - uses: actions/checkout@v4

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache Cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ matrix.os }}-${{ matrix.target }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ matrix.os }}-${{ matrix.target }}-cargo-registry-

    - name: Cache Cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ matrix.os }}-${{ matrix.target }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ matrix.os }}-${{ matrix.target }}-cargo-build-

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }} --example camera_model_converter

    - name: Prepare binary
      shell: bash
      run: |
        cd target/${{ matrix.target }}/release/examples
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          cp camera_model_converter.exe ${{ matrix.artifact_name }}
        else
          cp camera_model_converter ${{ matrix.artifact_name }}
        fi
        ls -la

    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: target/${{ matrix.target }}/release/examples/${{ matrix.artifact_name }}

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [publish-crate, build-binaries]
    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Display structure of downloaded files
      run: ls -la ./artifacts

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
        generate_release_notes: true
        files: |
          ./artifacts/fisheye-tools-linux-x86_64/fisheye-tools-linux-x86_64
          ./artifacts/fisheye-tools-macos-x86_64/fisheye-tools-macos-x86_64
          ./artifacts/fisheye-tools-macos-aarch64/fisheye-tools-macos-aarch64
          ./artifacts/fisheye-tools-windows-x86_64.exe/fisheye-tools-windows-x86_64.exe
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
